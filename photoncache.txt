
// ===== Account.java =====
package com.telcobright.rtc.photoncache;

import net.openhft.chronicle.wire.Marshallable;

public class Account implements Marshallable {
    private int id;
    private String name;
    private int balance;

    public Account() {}  // Required for Chronicle deserialization

    public Account(int id, String name, int balance) {
        this.id = id;
        this.name = name;
        this.balance = balance;
    }

    public void applyDelta(Account delta) {
        this.balance += delta.balance;
    }

    // Getters and setters
    public int getId() { return id; }
    public String getName() { return name; }
    public int getBalance() { return balance; }

    public void setId(int id) { this.id = id; }
    public void setName(String name) { this.name = name; }
    public void setBalance(int balance) { this.balance = balance; }

    @Override
    public String toString() {
        return "Account{id=" + id + ", name='" + name + "', balance=" + balance + "}";
    }
}

// ===== AccountCache.java =====
package com.telcobright.rtc.photoncache;

import net.openhft.chronicle.queue.*;
import net.openhft.chronicle.queue.impl.StoreFileListener;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import javax.annotation.PreDestroy;
import java.io.File;
import java.nio.file.Files;
import java.util.Map;
import java.util.concurrent.*;

public class AccountCache {//test comment
    String user="mustafa";
    private static final Logger logger = LogManager.getLogger(AccountCache.class);
    private final AccountStorage storage;
    private final AccountDeltaQueue deltaQueue;
    private final AccountDeltaConsumer consumer;
    private final ExecutorService executor;

    public AccountCache() {
        this.storage = new AccountStorage();
        this.deltaQueue = new AccountDeltaQueue("accountQueue", 7);
        this.consumer = new AccountDeltaConsumer(deltaQueue.createTailer(), storage);
        this.executor = Executors.newSingleThreadExecutor();
    }

    public void initializeAccounts(Map<Integer, Account> initialAccounts) {
        storage.initialize(initialAccounts);
        logger.info("Initialized accounts: {}", initialAccounts.keySet());
        consumer.replayPendingDeltas();
        executor.submit(consumer);
    }

    public void updateAccount(Account delta) {
        try {
            if (!storage.contains(delta.getId())) {
                logger.warn("Ignoring delta update: account {} not initialized", delta.getId());
                return;
            }
            ExcerptAppender appender = deltaQueue.getAppender();
            appender.writeDocument(w -> {
                w.write("id").int32(delta.getId());
                w.write("delta").marshallable(delta);
            });
            storage.applyDelta(delta.getId(), delta);
        } catch (Exception e) {
            logger.error("Failed to update queue for account {}", delta.getId(), e);
        }
    }

    public Account getAccount(int id) {
        return storage.get(id);
    }

    @PreDestroy
    public void shutdown() {
        consumer.stop();
        executor.shutdown();
        deltaQueue.close();
    }
}







// ===== AccountDeltaConsumer.java =====
package com.telcobright.rtc.photoncache;

import net.openhft.chronicle.queue.ExcerptTailer;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

class AccountDeltaConsumer implements Runnable {
    private static final Logger logger = LogManager.getLogger(AccountDeltaConsumer.class);
    private final ExcerptTailer tailer;
    private final AccountStorage storage;
    private volatile boolean running = true;

    public AccountDeltaConsumer(ExcerptTailer tailer, AccountStorage storage) {
        this.tailer = tailer;
        this.storage = storage;
    }

    public void stop() {
        this.running = false;
    }

    public void replayPendingDeltas() {
        while (true) {
            boolean read = tailer.readDocument(w -> {
                int id = w.read("id").int32();
                Account delta = new Account();
                w.read("delta").marshallable(delta);
                if (storage.contains(id)) {
                    storage.applyDelta(id, delta);
                    logger.info("Applied pending delta to account {}: {}", id, delta);
                } else {
                    logger.warn("Skipping delta for unknown account ID {} during initialization", id);
                }
            });
            if (!read) break;
        }
    }

    @Override
    public void run() {
        while (running) {
            try {
                boolean read = tailer.readDocument(w -> {
                    int id = w.read("id").int32();
                    Account delta = new Account();
                    w.read("delta").marshallable(delta);
                    if (storage.contains(id)) {
                        storage.applyDelta(id, delta);
                        logger.info("Updated in DB: {}", storage.get(id));
                    } else {
                        logger.warn("Skipping delta for unknown account ID {} in consume loop", id);
                    }
                });
                if (!read) {
                    Thread.sleep(100);
                }
            } catch (Exception e) {
                logger.error("Failed to process message", e);
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException ie) {
                    Thread.currentThread().interrupt();
                }
            }
        }
    }
}

// ===== AccountDeltaQueue.java =====
package com.telcobright.rtc.photoncache;

import net.openhft.chronicle.queue.ChronicleQueue;
import net.openhft.chronicle.queue.ExcerptAppender;
import net.openhft.chronicle.queue.ExcerptTailer;
import net.openhft.chronicle.queue.RollCycles;
import net.openhft.chronicle.queue.impl.StoreFileListener;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.File;
import java.nio.file.Files;


class AccountDeltaQueue {
    private static final Logger logger = LogManager.getLogger(AccountDeltaQueue.class);
    private final ChronicleQueue queue;
    private final ThreadLocal<ExcerptAppender> threadLocalAppender;

    public AccountDeltaQueue(String queuePath, int retentionDays) {
        this.queue = ChronicleQueue.singleBuilder(queuePath)
                .rollCycle(RollCycles.FAST_DAILY)
                .storeFileListener(new StoreFileListener() {
                    @Override
                    public void onAcquired(int cycle, File file) {
                        cleanOldFiles(file.getParentFile(), cycle, retentionDays);
                    }

                    @Override
                    public void onReleased(int cycle, File file) {}

                    private void cleanOldFiles(File queueDir, int currentCycle, int retentionDays) {
                        long oldestCycleToKeep = currentCycle - retentionDays;
                        File[] files = queueDir.listFiles((dir, name) -> name.endsWith(".cq4"));
                        if (files != null) {
                            for (File file : files) {
                                try {
                                    String baseName = file.getName().split("\\.")[0];
                                    String numericPart = baseName.replaceAll("\\D", "");
                                    if (!numericPart.isEmpty()) {
                                        long fileCycle = Long.parseLong(numericPart);
                                        if (fileCycle < oldestCycleToKeep) {
                                            Files.delete(file.toPath());
                                            logger.info("Deleted old queue file: {}", file.getName());
                                        }
                                    }
                                } catch (Exception e) {
                                    logger.warn("Could not process file: {}", file.getName());
                                }
                            }
                        }
                    }
                })
                .build();

        this.threadLocalAppender = ThreadLocal.withInitial(queue::createAppender);
    }

    public ExcerptAppender getAppender() {
        return threadLocalAppender.get();
    }

    public ExcerptTailer createTailer() {
        return queue.createTailer();
    }

    public void close() {
        queue.close();
    }
}

// ===== AccountStorage.java =====
package com.telcobright.rtc.photoncache;

import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

class AccountStorage {
    private final Map<Integer, Account> accountMap = new ConcurrentHashMap<>();

    public void initialize(Map<Integer, Account> initialAccounts) {
        accountMap.clear();
        accountMap.putAll(initialAccounts);
    }

    public Account get(int id) {
        return accountMap.get(id);
    }

    public boolean contains(int id) {
        return accountMap.containsKey(id);
    }

    public void applyDelta(int id, Account delta) {
        Account acc = accountMap.get(id);
        if (acc != null) {
            acc.applyDelta(delta);
        }
    }

    public Map<Integer, Account> snapshot() {
        return Map.copyOf(accountMap);
    }
}

// ===== Main.java =====
package com.telcobright.rtc.photoncache;

import java.util.Map;

public class Main {
    public static void main(String[] args) throws InterruptedException {
        AccountCache cache = new AccountCache();

        // ✅ Step 1: Initialize known accounts
        Map<Integer, Account> initialAccounts = Map.of(
                1, new Account(1, "Alice", 100),
                2, new Account(2, "Bob", 200)
        );
        cache.initializeAccounts(initialAccounts);

        // ✅ Step 2: Apply deltas
        cache.updateAccount(new Account(1, "Alice", 50));  // Alice +50
        cache.updateAccount(new Account(2, "Bob", -30));   // Bob -30
        cache.updateAccount(new Account(3, "Charlie", 300)); // Will be ignored and logged

        // ⏳ Give time for background thread to consume
        Thread.sleep(1000);

        // ✅ Step 3: Print final state
        System.out.println("Final Alice: " + cache.getAccount(1));
        System.out.println("Final Bob: " + cache.getAccount(2));

        // ✅ Step 4: Clean shutdown
        cache.shutdown();
        System.out.println("end");
    }
}
